{"version":3,"sources":["TimeInput.tsx","DoseInput.tsx","utils.ts","App.tsx","store.ts","index.tsx"],"names":["TimeInput","props","inputRef","useRef","selectRef","dispatcher","useDispatch","onChange","type","property","set","value","current","valueAsNumber","NaN","units","id","ref","defaultValue","selected","doseType","toInternalTime","App","state","useSelector","className","htmlFor","onClick","console","log","tEnd","tDose","interval","dose","convertDose","tHalf","tMax","Ke","Math","f_Ke","Ka","f","fp","guess","xmin","xmax","threshold","y","abs","newtonRaphson","x","f_tMax","pow","f_tMax_prime","Number","EPSILON","MAX_VALUE","Dose","offset","this","t","bioavailability","Vd","exp","data","Array","mode","dt","doses","timeScale","fromInternalTime","i","length","push","j","isNaN","toPrecision","message","style","width","height","useResizeHandler","layout","autosize","initialState","store","createStore","action","stateCopy","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.07567f8c.chunk.js","sourcesContent":["import React, { useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport \"./styles.css\";\r\n\r\nimport { AppDispatch } from \"./store\";\r\n\r\ntype TimeInputProps = {\r\n  id: string;\r\n  selected: \"hours\" | \"days\" | \"weeks\";\r\n  set: string;\r\n};\r\n\r\nexport default function TimeInput(props: TimeInputProps) {\r\n  let inputRef = useRef<HTMLInputElement>(null);\r\n  let selectRef = useRef<HTMLSelectElement>(null);\r\n  let dispatcher = useDispatch<AppDispatch>();\r\n\r\n  let onChange = () => {\r\n    dispatcher({\r\n      type: \"set\",\r\n      property: props.set,\r\n      value: {\r\n        value: inputRef.current?.valueAsNumber ?? NaN,\r\n        units: selectRef.current?.value ?? \"\"\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div id={props.id}>\r\n      <input onChange={onChange} type=\"number\" ref={inputRef} />\r\n      <select onChange={onChange} defaultValue={props.selected} ref={selectRef}>\r\n        <option value=\"hours\">hours</option>\r\n        <option value=\"days\">days</option>\r\n        <option value=\"weeks\">weeks</option>\r\n      </select>\r\n    </div>\r\n  );\r\n}\r\n","import \"./styles.css\";\r\n\r\nimport { AppDispatch } from \"./store\";\r\nimport React, { useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\ntype DoseInputProps = {\r\n  selected: \"per_dose\" | \"per_hour\" | \"per_day\" | \"per_week\";\r\n  id: string;\r\n  set: string;\r\n};\r\n\r\nexport default function TimeInput(props: DoseInputProps) {\r\n  let inputRef = useRef<HTMLInputElement>(null);\r\n  let selectRef = useRef<HTMLSelectElement>(null);\r\n  let dispatcher = useDispatch<AppDispatch>();\r\n  \r\n  let onChange = () => {\r\n    dispatcher({\r\n      type: \"set\",\r\n      property: props.set,\r\n      value: {\r\n        value: inputRef.current?.valueAsNumber ?? NaN,\r\n        doseType: selectRef.current?.value ?? \"\"\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input onChange={onChange} id={props.id} type=\"number\" ref={inputRef} />\r\n      <select onChange={onChange} defaultValue={props.selected} ref={selectRef}>\r\n        <option value=\"per_dose\">per dose</option>\r\n        <option value=\"per_hour\">per hour</option>\r\n        <option value=\"per_day\">per day</option>\r\n        <option value=\"per_week\">per week</option>\r\n      </select>\r\n    </div>\r\n  );\r\n}\r\n","export function toInternalTime(value: number, units: string) {\r\n  switch (units) {\r\n    case \"hours\":\r\n      return value * 60 * 60;\r\n    case \"days\":\r\n      return value * 24 * 60 * 60;\r\n    case \"weeks\":\r\n      return value * 7 * 24 * 60 * 60;\r\n  }\r\n\r\n  return NaN\r\n}\r\n\r\nexport function fromInternalTime(value: number, units: string) {\r\n  switch (units) {\r\n    case \"hours\":\r\n      return value / (60 * 60);\r\n    case \"days\":\r\n      return value / (24 * 60 * 60);\r\n    case \"weeks\":\r\n      return value / (7 * 24 * 60 * 60);\r\n  }\r\n\r\n  return NaN\r\n}\r\n\r\nexport function convertDose(dose: number, interval: number, doseType: string) {\r\n  switch (doseType) {\r\n    case \"per_dose\":\r\n      return dose;\r\n    case \"per_hour\":\r\n      return dose * (interval / toInternalTime(1, \"hours\"));\r\n    case \"per_day\":\r\n      return dose * (interval / toInternalTime(1, \"days\"));\r\n    case \"per_week\":\r\n      return dose * (interval / toInternalTime(1, \"weeks\"));\r\n  }\r\n\r\n  return NaN\r\n}\r\n\r\nexport function newtonRaphson(f: (x: number) => number, fp: (x: number) => number, guess: number, xmin: number, xmax: number, threshold: number) {\r\n  let y;\r\n\r\n  do {\r\n    y = f(guess);\r\n    guess = guess - y / fp(guess);\r\n\r\n    if (guess < xmin) {\r\n      guess = xmin;\r\n    } else if (guess > xmax) {\r\n      guess = xmax;\r\n    }\r\n  } while (Math.abs(y) > threshold);\r\n\r\n  return guess;\r\n}\r\n\r\nexport function f_Ke(tHalf: number) {\r\n  return Math.log(2) / tHalf;\r\n}\r\n\r\n// these are indeterminate form when Ka = Ke, but have a limit\r\nexport function f_tMax(Ka: number, Ke: number) {\r\n  return Ka !== Ke ? Math.log(Ka / Ke) / (Ka - Ke) : 1 / Ka;\r\n}\r\n\r\nexport function f_tMax_prime(Ka: number, Ke: number) {\r\n  return Ka !== Ke\r\n    ? (Ka * -Math.log(Ka / Ke) + Ka - Ke) / (Ka * Math.pow(Ka - Ke, 2))\r\n    : -1 / (2 * Math.pow(Ka, 2));\r\n}\r\n","import \"./styles.css\";\r\nimport TimeInput from \"./TimeInput\";\r\nimport DoseInput from \"./DoseInput\";\r\nimport { useRef } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  convertDose,\r\n  fromInternalTime,\r\n  f_Ke,\r\n  f_tMax,\r\n  f_tMax_prime,\r\n  newtonRaphson,\r\n  toInternalTime\r\n} from \"./utils\";\r\nimport { AppDispatch, RootState } from \"./store\";\r\nimport React from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\n\r\nexport default function App() {\r\n  let selectRef = useRef<HTMLSelectElement>(null);\r\n  let state = useSelector((state: RootState) => state);\r\n  let dispatcher = useDispatch<AppDispatch>();\r\n\r\n  let onClick = () => {\r\n    console.log(state);\r\n\r\n    let tEnd = toInternalTime(state.tEnd.value, state.tEnd.units);\r\n    let tDose = toInternalTime(state.tDose.value, state.tDose.units);\r\n    let interval = toInternalTime(state.interval.value, state.interval.units);\r\n\r\n    let dose = convertDose(state.dose.value, interval, state.dose.doseType);\r\n\r\n    let tHalf = toInternalTime(state.tHalf.value, state.tHalf.units);\r\n    let tMax = toInternalTime(state.tMax.value, state.tMax.units);\r\n\r\n    let Ke = f_Ke(tHalf);\r\n\r\n    let Ka = newtonRaphson(\r\n      (x: number) => f_tMax(x, Ke) - tMax,\r\n      (x: number) => f_tMax_prime(x, Ke),\r\n      1,\r\n      Number.EPSILON,\r\n      Number.MAX_VALUE,\r\n      tMax * 1e-4\r\n    );\r\n\r\n    console.log(`Ke: ${Ke}`);\r\n    console.log(`Ka: ${Ka}`);\r\n\r\n    class Dose {\r\n      offset: number;\r\n\r\n      constructor(offset: number) {\r\n        this.offset = offset;\r\n      }\r\n\r\n      f(\r\n        t: number,\r\n        Ka: number,\r\n        Ke: number,\r\n        dose: number,\r\n        bioavailability: number,\r\n        Vd: number\r\n      ) {\r\n        t = t - this.offset;\r\n        return (\r\n          ((bioavailability * dose * Ka) / (Vd * (Ka - Ke))) *\r\n          (Math.exp(-Ke * t) - Math.exp(-Ka * t))\r\n        );\r\n      }\r\n    }\r\n\r\n    let data = {\r\n      x: new Array<number>(),\r\n      y: new Array<number>(),\r\n      mode: \"lines\"\r\n    };\r\n\r\n    let dt = tEnd / 10000;\r\n    let doses: Dose[] = [];\r\n    const timeScale = fromInternalTime(1, selectRef.current?.value ?? \"\" );\r\n\r\n    for (let i = 0, t = 0; t < tEnd; i++) {\r\n      t = dt * i;\r\n\r\n      if (t >= interval * doses.length && t < tDose) {\r\n        doses.push(new Dose(t));\r\n      }\r\n\r\n      let y = 0;\r\n\r\n      for (let j = 0; j < doses.length; j++) {\r\n        y += doses[j].f(t, Ka, Ke, dose, 1, 1);\r\n      }\r\n\r\n      data.x.push(t * timeScale);\r\n      data.y.push(y);\r\n    }\r\n\r\n    dispatcher({\r\n      type: \"set\",\r\n      property: \"data\",\r\n      value: data\r\n    });\r\n\r\n    dispatcher({\r\n      type: \"set\",\r\n      property: \"message\",\r\n      value: !isNaN(dose)\r\n        ? `Dosing ${dose.toPrecision(4)} every ${state.interval.value} ${\r\n            state.interval.units\r\n          }`\r\n        : \"\"\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Medication Dose Plotter</h1>\r\n      <label htmlFor=\"tEnd\">Time to plot</label>\r\n      <TimeInput id=\"tEnd\" set=\"tEnd\" selected=\"weeks\" />\r\n\r\n      <label htmlFor=\"tDose\">Time to dose</label>\r\n      <TimeInput id=\"tDose\" set=\"tDose\" selected=\"weeks\" />\r\n\r\n      <label htmlFor=\"interval\">Time between doses</label>\r\n      <TimeInput id=\"interval\" set=\"interval\" selected=\"days\" />\r\n\r\n      <label htmlFor=\"dose\">Dose (any units)</label>\r\n      <DoseInput id=\"dose\" set=\"dose\" selected=\"per_dose\" />\r\n\r\n      <label htmlFor=\"tHalf\">Half-life</label>\r\n      <TimeInput id=\"tHalf\" set=\"tHalf\" selected=\"days\" />\r\n\r\n      <label htmlFor=\"tMax\">Time to maximum concentration</label>\r\n      <TimeInput id=\"tMax\" set=\"tMax\" selected=\"days\" />\r\n\r\n      <button onClick={onClick}>Plot</button>\r\n      <select defaultValue=\"days\" ref={selectRef}>\r\n        <option value=\"hours\">Hours</option>\r\n        <option value=\"days\">Days</option>\r\n        <option value=\"weeks\">Weeks</option>\r\n      </select>\r\n      <p>{state.message}</p>\r\n      <Plot\r\n        style={{ width: \"100%\", height: \"100%\" }}\r\n        useResizeHandler\r\n        data={[state.data]}\r\n        layout={{ autosize: true }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import { createStore } from \"redux\";\r\n\r\nlet defaultValue = {\r\n  value: NaN,\r\n  units: \"\"\r\n};\r\n\r\nlet initialState = {\r\n  tEnd: defaultValue,\r\n  tDose: defaultValue,\r\n  interval: defaultValue,\r\n  tHalf: defaultValue,\r\n  tMax: defaultValue,\r\n  dose: { value: NaN, doseType: \"\" },\r\n  data: {\r\n    x: new Array<number>(),\r\n    y: new Array<number>()\r\n  },\r\n  message: \"\"\r\n};\r\n\r\nexport type MyAction = {\r\n  type: \"set\";\r\n  property: string;\r\n  value: any;\r\n};\r\n\r\nfunction reducer(state = initialState, action: MyAction) {\r\n  console.log(action);\r\n\r\n  let stateCopy = { ...state };\r\n\r\n  if (action.type === \"set\") {\r\n    (stateCopy as {[key: string]: any})[action.property] = action.value;\r\n  }\r\n\r\n  return stateCopy;\r\n}\r\n\r\nconst store = createStore(reducer);\r\nexport default store;\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n","import React, { StrictMode } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nimport App from \"./App\";\r\nimport store from \"./store\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\n\r\nReactDOM.render(\r\n  <StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </StrictMode>,\r\n  rootElement\r\n);\r\n"],"sourceRoot":""}